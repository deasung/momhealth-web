version: 0.2

env:
  variables:
    IMAGE_REPO_NAME: "momhealth-web-production"
    IMAGE_TAG: "latest"
    CONTAINER_NAME: "momhealth-web"
    EC2_TAG_KEY: "Name"
    EC2_TAG_VAL: "momhealth-web"
    HOST_PORT: "80"
    APP_PORT: "3300"
    PLATFORM: "linux/arm64"

phases:
  install:
    commands:
      - echo "[install] docker version"
      - docker --version

  pre_build:
    commands:
      - echo "[pre_build] login & ensure repo"
      - set -e
      - REGION=${AWS_REGION:-${AWS_DEFAULT_REGION}}
      - echo "Region=${REGION}"
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - ECR_URI=${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com
      - if ! aws ecr describe-repositories --repository-names "${IMAGE_REPO_NAME}" --region "${REGION}" >/dev/null 2>&1; then
        aws ecr create-repository --repository-name "${IMAGE_REPO_NAME}" --image-scanning-configuration scanOnPush=true --region "${REGION}";
        fi
      - aws ecr get-login-password --region "${REGION}" | docker login --username AWS --password-stdin "${ECR_URI}"
      - COMMIT=${CODEBUILD_RESOLVED_SOURCE_VERSION:-local}
      - IMAGE=${ECR_URI}/${IMAGE_REPO_NAME}
      - docker run --privileged --rm tonistiigi/binfmt --install all
      - docker buildx create --use --name multi || docker buildx use multi
      - docker buildx inspect --bootstrap

  build:
    commands:
      - echo "[buildx] build and push (arm64)"
      - docker buildx build --platform "${PLATFORM}" --build-arg ENV_FILE="${ENV_FILE}" -t "${IMAGE}:${COMMIT}" -t "${IMAGE}:${IMAGE_TAG}" --push .

  post_build:
    commands:
      - echo "[post_build] write imagedefinitions.json"
      - printf '[{"name":"%s","imageUri":"%s"}]' "${IMAGE_REPO_NAME}" "${IMAGE}:${IMAGE_TAG}" > imagedefinitions.json
      - cat imagedefinitions.json
      - echo "[deploy] SSM RunCommand to EC2 by tag ${EC2_TAG_KEY}=${EC2_TAG_VAL}"
      - REGION=${AWS_REGION:-${AWS_DEFAULT_REGION}}

      - |
        cat > ssm-params.json <<EOF
        {
          "commands": [
            "set -e",
            "REGION='${REGION}'",
            "ACCOUNT_ID='${ACCOUNT_ID}'",
            "IMAGE='${IMAGE}'",
            "CONTAINER='${CONTAINER_NAME}'",
            "HOST_PORT='${HOST_PORT}'",
            "APP_PORT='${APP_PORT}'",
            "aws ecr get-login-password --region \\${REGION} | docker login --username AWS --password-stdin \\${ACCOUNT_ID}.dkr.ecr.\\${REGION}.amazonaws.com",
            "docker pull \\${IMAGE}:latest",
            "docker stop \\${CONTAINER} || true",
            "docker rm \\${CONTAINER} || true",
            "docker run -d --name \\${CONTAINER} -p \\${HOST_PORT}:\\${APP_PORT} --log-driver json-file --log-opt max-size=10m --log-opt max-file=3 -e NODE_ENV=production -e HOST=0.0.0.0 -e PORT=\\${APP_PORT} \\${IMAGE}:latest"
          ]
        }
        EOF

      - |
        COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy ${IMAGE_REPO_NAME} to EC2" \
          --parameters file://ssm-params.json \
          --targets "Key=tag:${EC2_TAG_KEY},Values=${EC2_TAG_VAL}" \
          --timeout-seconds 600 \
          --region "${REGION}" \
          --query "Command.CommandId" --output text)
        echo "SSM CommandId=${COMMAND_ID}"

      - aws ssm list-command-invocations --command-id "$COMMAND_ID" --details --region "${REGION}" || true

artifacts:
  files:
    - imagedefinitions.json
